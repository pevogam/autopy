# This file is autogenerated by maturin v1.5.1
# To update, run
#
#    maturin generate-ci github
#
name: Build and test

on:
  push:
  pull_request:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Override continuous dependency path
        run: |
          awk '
          /^\[dependencies\.autopilot\]$/ {
              print
              getline
              print "path = \"./autopilot-rs\""
              next
          }
          { print }
          ' Cargo.toml > Cargo.toml.tmp && mv Cargo.toml.tmp Cargo.toml
      - uses: actions/checkout@v4
        with:
          repository: autopilot-rs/autopilot-rs
          path: ./autopilot-rs
          ref: ${{ github.event.inputs.rust_ref || 'main' }}
      - name: Set up cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
            autopilot-rs/target
          key: ${{ runner.os }}-cargo-autopilot-${{ hashFiles('**/Cargo.lock', 'autopilot-rs/**/Cargo.lock') }}
      - name: Install system dependencies
        run: sudo apt-get install -y libxtst-dev xvfb
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          before-script-linux: |
            yum update
            yum install -y libXtst-devel
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          architecture: ${{ matrix.platform.target }}
      - name: Override continuous dependency path
        run: |
          $content = Get-Content -Raw -Path Cargo.toml
          $updated = $content -replace '(?m)^\[dependencies\.autopilot\]\r?\n\s*version = ".*?"', '[dependencies.autopilot]
          path = "./autopilot-rs"'
          Set-Content -Path Cargo.toml -Value $updated
      - uses: actions/checkout@v4
        with:
          repository: autopilot-rs/autopilot-rs
          path: ./autopilot-rs
          ref: ${{ github.event.inputs.rust_ref || 'main' }}
      - name: Set up cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
            autopilot-rs/target
          key: ${{ runner.os }}-cargo-autopilot-${{ hashFiles('**/Cargo.lock', 'autopilot-rs/**/Cargo.lock') }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-latest
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Override continuous dependency path
        run: |
          awk '
          /^\[dependencies\.autopilot\]$/ {
              print
              getline
              print "path = \"./autopilot-rs\""
              next
          }
          { print }
          ' Cargo.toml > Cargo.toml.tmp && mv Cargo.toml.tmp Cargo.toml
      - uses: actions/checkout@v4
        with:
          repository: autopilot-rs/autopilot-rs
          path: ./autopilot-rs
          ref: ${{ github.event.inputs.rust_ref || 'main' }}
      - name: Set up cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
            autopilot-rs/target
          key: ${{ runner.os }}-cargo-autopilot-${{ hashFiles('**/Cargo.lock', 'autopilot-rs/**/Cargo.lock') }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, windows, macos, sdist]
    steps:
      - uses: actions/download-artifact@v4
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*

  testing-linux:
    name: Testing on linux
    runs-on: ubuntu-latest
    needs: [linux]
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: actions/download-artifact@v4
      - name: Installing built artifact
        run: |
          pip install wheels-linux-x86_64/autopy-*-cp310-*
      - uses: actions/checkout@v4
        with:
          repository: intra2net/guibot
          path: ./guibot
          ref: ${{ github.event.inputs.rust_ref || 'master' }}
      - name: Local pip installation of caller code
        run: |
          cd guibot/packaging
          pip install .
      - name: Prepare virtual screen (fake display)
        run: |
          sudo apt-get -y install libx11-dev libxtst-dev xvfb vim-common
          sudo apt-get install -y x11-utils libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
          Xvfb :99 -screen 0 1024x768x24 &> /tmp/xvfb.log  &
          sudo touch ~/.Xauthority
          sudo xauth -f ~/.Xauthority add ${HOST}:99 . $(xxd -l 16 -p /dev/urandom)
          sudo chmod a+rxw ~/.Xauthority
          # give xvfb some time to start
          sleep 3
      - name: Run current caller tests
        run: |
          cd guibot/tests
          pip install coverage PyQt6==6.8.1 numpy opencv-contrib-python
          bash coverage_analysis.sh
        env:
          DISPLAY: 99.0
          TESSDATA_PREFIX: /usr/share/tesseract-ocr/5/tessdata

  testing-windows:
    name: Testing on windows
    runs-on: windows-latest
    needs: [windows]
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: actions/download-artifact@v4
      - name: Installing built artifact
        run: |
          $wheel = Get-ChildItem -Path wheels-windows-x64 -Filter "autopy-*-cp310-*.whl" | Select-Object -First 1
          if (-not $wheel) { throw "No matching wheel found!" }
          pip install $wheel.FullName
      - uses: actions/checkout@v4
        with:
          repository: intra2net/guibot
          path: ./guibot
          ref: ${{ github.event.inputs.rust_ref || 'master' }}
      - name: Local pip installation of caller code
        run: |
          cd guibot/packaging
          pip install .
      - name: Prepare virtual screen (fake display)
        run: |
          pip install wxPython==4.2.1
          python -c "import wx; app = wx.App(); display = wx.Display()"
      - name: Run current caller tests
        run: |
          cd guibot/tests
          pip install coverage PyQt6==6.8.1 numpy opencv-contrib-python
          bash coverage_analysis.sh
        env:
          TESSDATA_PREFIX: /usr/share/tesseract-ocr/5/tessdata

  testing-macos:
    name: Testing on macos
    runs-on: macos-latest
    needs: [macos]
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: actions/download-artifact@v4
      - name: Installing built artifact
        run: |
          pip install wheels-macos-aarch64/autopy-*-cp310-*
      - uses: actions/checkout@v4
        with:
          repository: intra2net/guibot
          path: ./guibot
          ref: ${{ github.event.inputs.rust_ref || 'master' }}
      - name: Local pip installation of caller code
        run: |
          cd guibot/packaging
          pip install .
      - name: Prepare virtual screen (fake display)
        run: |
          pip install wxPython==4.2.1
          python -c "import wx; app = wx.App(); display = wx.Display()"
      - name: Run current caller tests
        run: |
          cd guibot/tests
          pip install coverage PyQt6==6.8.1 numpy opencv-contrib-python
          bash coverage_analysis.sh
        env:
          TESSDATA_PREFIX: /usr/share/tesseract-ocr/5/tessdata
